---
title: "Search for California Law Enforcement Agencies (LEA)"
--- 

This is a list of California law enforcement agencies that we have gathered and curated for the purpose of finding and tracking policy manuals and military equipment inventories. This list of LEAs was obtained from the [California's Commision on Police Officer Standards and Training](https://post.ca.gov/le-agencies)

## Search By Keyword
### **Notes**
- MEP = Military Equipment Policy
- MEI = Military Equipment Inventory



```{ojs}
data = FileAttachment("LEA-20230424.csv").csv({ typed: true })

viewof search = Inputs.search(data, 
{placeholder: "Enter a zip code, county, city, or police department name", 
width: 900,
label: "Search LEAs"
})
```

```{ojs}
viewof rows = Inputs.table(search, {
  header: {
    Ref: "Reference Number",
    LEA_Name: "LEA Name",
    Exact_Address: "Exact Address",
    Zip_Code: "Zip Code",
    LEA_Type: "LEA Type",
    Site: "LEA Website",
    Policy_Manual_Exists: "Policy Manual Exists?",
    Mil_Equip_Policy_Exists: "MEP Exists?",
    "Military Equipment Inventory Exists": "MEI Exists?",
    QA_Policy_Manual: "QA Policy Manual Link",
    QA_Mil_Equip_Policy: "QA MEP Link",
    "QA Mil_Equip_Inventory (if separate)": "QA MEI Link (if separate)"
  },
  format: {
    Zip_Code: x => x.toFixed(0),
  },
})
```

## Search Fatal Encounters Dataset
```{python}
import pandas as pd
sheet_id = "1dKmaV_JiWcG8XBoRgP8b4e9Eopkpgt7FL7nyspvzAsE"
sheet_name = "sample_1"
url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/gviz/tq?tqx=out:csv&sheet={sheet_name}"
df = pd.read_csv(url)
ojs_define(fe_data = df)
```

```{ojs}
viewof fe_search = Inputs.search(transpose(fe_data), 
{placeholder: "Enter a name, zip code, county, city, or police department name", 
width: 900,
label: "Search LEAs"
})
```

```{ojs}
viewof fe_rows = Inputs.table(fe_search, {
  columns: [
    'Unique ID',
    'Name',
    'Age',
    'Gender',
    'Race',
    'Race with imputations',
    'Imputation probability',
    'URL of image (PLS NO HOTLINKS)',
    ' Date of injury resulting in death (month/day/year)',
    'Location of injury (address)',
    'Location of death (city)',
    'State',
    'Location of death (zip code)',
    'Location of death (county)',
    'Full Address',
    'Latitude',
    'Longitude',
    'Agency or agencies involved',
    'Highest level of force',
    'UID Temporary',
    'Name Temporary',
    'Armed/Unarmed',
    'Alleged weapon',
    'Aggressive physical movement',
    'Fleeing/Not fleeing',
    'Description Temp',
    'URL Temp',
    'Brief description',
    'Intended use of force (Developing)',
    'Supporting document link',
  ],
  format: {
    'Unique ID': x => x.toFixed(0),
    'Location of death (zip code)': x => x.toFixed(0)
  },
})
```

## Search By Map (under construction...)
```{ojs}
geo = require("geoverview@1.2.1")
topojson = require("topojson")
us = FileAttachment("ca_counties_geoverview.json").json()
airportsJson = FileAttachment("airports.geojson").json()
```
```{ojs}
counties = topojson.feature(us, us.objects.counties)
```

```{ojs}
geo.view(counties, {width: 900})
geo.view(airportsJson)
```

```{ojs}
bertin = require("bertin@1.2.4")
```
```{ojs}
bertin.quickdraw(counties)
```




