[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "ca-map-cnty-bndry.html",
    "href": "ca-map-cnty-bndry.html",
    "title": "California Map With County Boundaries",
    "section": "",
    "text": "Code\nfrom urllib.request import urlopen\nimport json\nwith urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:\n    counties = json.load(response)\n\nimport pandas as pd\n# ** the file below is hosted locally but I could alternatively write code that removes all the non-CA fip codes from the DF \ndf = pd.read_csv(\"one_col_raw.githubusercontent.com_plotly_datasets_master_fips-unemp-16.csv\",  \n                   dtype={\"fips\": str})\ndf_scatter = pd.read_csv(\"LEA-20230424.csv\",  \n                   dtype={\"fips\": str})\n\nimport plotly.express as px\n\nfig_scatter = px.scatter_mapbox(df_scatter, lat='Latitude', lon='Longitude',\n                  # color=\"Policy_Manual_Exists\", \n                  # size=\"car_hours\",\n                  labels={'LEA_Type': 'LEA Type', 'Mil_Equip_Policy_Exists' : 'Military Equipment Policy Exists', 'Policy_Manual_Exists' : 'Policy Manual Exists','QA_Policy_Manual': 'Policy Manual Link'},  # replaces left hand name with right hand name in hover\n                  hover_name='LEA_Name',\n                  hover_data=['City', 'County', 'Site', 'LEA_Type', 'Mil_Equip_Policy_Exists', 'Military Equipment Inventory Exists', 'Policy_Manual_Exists', 'QA_Policy_Manual', ],\n                  color_continuous_scale=px.colors.cyclical.IceFire, size_max=15, zoom=10,\n                  mapbox_style=\"carto-positron\")\n\nfig = px.choropleth_mapbox(df, geojson=counties, locations='fips',\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(0, 12),\n                           mapbox_style=\"carto-positron\",\n                           zoom=4.7, center = {\"lat\": 37.0902, \"lon\": -120.7129},\n                           opacity=0.5,\n                          )\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.add_trace(\n    fig_scatter.data[0]\n)\nfig.show()"
  },
  {
    "objectID": "lea-search-bar.html",
    "href": "lea-search-bar.html",
    "title": "Search Bar To Search Information About California LEA’s",
    "section": "",
    "text": "Code\nimport pandas as pd\ndf = pd.read_csv(\"LEA-20230424.csv\")\n\n# prompt user to enter a zip code, city, or police department name\nsearch_term = \"\"\nsearch_term = input(\"Enter a zip code, city, or police department:\")\nwhile search_term != 'q':    \n    # for exact LEA name searches\n    if ('Department' or 'Attorney' or 'Police' or 'Office' or 'Sheriff') in search_term:\n        rows = df.loc[df['LEA_Name'] == search_term]\n    # for zip code searches \n    elif search_term.isdigit():\n        rows = df.loc[df['Zip_Code'] == int(search_term)]\n    # for city searches\n    else: \n        rows = df.loc[df['City'] == search_term]\n    if (len(rows) == 0):\n        print(\"Couldn't find any matches. Please double-check your spelling and capitalization\")\n    else: \n        display(rows)\n    search_term = input(\"Enter a zip code, city, or police department:\")\n  \n\n\nEnter a zip code, city, or police department: 91706\nEnter a zip code, city, or police department: q\n\n\n\n\n\n\n\n\n\nRef\nLEA_Name\nReference\nContract\nPOST Participating\nCity\nLatitude\nLongitude\nCounty\nState\nZip_Code\nLEA_Type\nSite\nPolicy_Manual_Exists\nMil_Equip_Policy_Exists\nMilitary Equipment Inventory Exists\nQA_Policy_Manual\nQA_Mil_Equip_Policy\nQA Mil_Equip_Inventory (if separate)\nNotes\n\n\n\n\n0\nSB978-703\nBaldwin Park Police Department\nNaN\nno\nyes\nBaldwin Park\n34.08536\n-117.9603\nLos Angeles County\nCalifornia\n91706.0\nPolice\nhttps://www.baldwinparkpolice.com/Search?searc...\nTrue\nTRUE/Draft\nTRUE\nhttps://www.baldwinparkpolice.com/DocumentCent...\nhttps://www.baldwinpark.com/public-notices/291...\nhttps://www.baldwinpark.com/public-notices/291...\nThe current manual, from 2/28/2022 is listed o..."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Know Systemic Racism Data Projects",
    "section": "",
    "text": "All of the projects below are in active development. If you are interested in learning more about Know Systemic Racism, see this post or contact Felicia Smith at felicias@stanford.edu"
  },
  {
    "objectID": "index.html#california-law-enforcement-agencies",
    "href": "index.html#california-law-enforcement-agencies",
    "title": "Know Systemic Racism Data Projects",
    "section": "California Law Enforcement Agencies",
    "text": "California Law Enforcement Agencies\n\ndata | search\nThis is a list of California law enforcement agencies with coordinate locations of headquarters and links to policy manuals and military equipment inventories."
  },
  {
    "objectID": "index.html#knowledge-graph",
    "href": "index.html#knowledge-graph",
    "title": "Know Systemic Racism Data Projects",
    "section": "Knowledge Graph",
    "text": "Knowledge Graph\n\ndata | app\nThe Know Systemic Racism Knowledge Graph is a project to construct a richly connected graph of events, people, organizations, and people to reveal connections between discrete collections of data and the people behind the data."
  },
  {
    "objectID": "index.html#california-map",
    "href": "index.html#california-map",
    "title": "Know Systemic Racism Data Projects",
    "section": "California Map",
    "text": "California Map\n\nview map | code\n\n\nCode\nfrom urllib.request import urlopen\nimport json\nwith urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:\n    counties = json.load(response)\n\nimport pandas as pd\n# ** the file below is hosted locally but I could alternatively write code that removes all the non-CA fip codes from the DF \ndf = pd.read_csv(\"one_col_raw.githubusercontent.com_plotly_datasets_master_fips-unemp-16.csv\",  \n                   dtype={\"fips\": str})\ndf_scatter = pd.read_csv(\"LEA-20230424.csv\")\n\nimport plotly.express as px\n\nfig_scatter = px.scatter_mapbox(df_scatter, \n                  lat='Latitude',\n                  lon='Longitude',\n                  # color=\"Policy_Manual_Exists\", \n                  # size=\"car_hours\",\n                  labels={'LEA_Type': 'LEA Type', 'QA_Policy_Manual': 'Policy Manual Link'},  # replaces left hand name with right hand name in hover\n                  hover_name='LEA_Name',\n                  hover_data={\n                                  'City': True, \n                                  'County': True, \n                                  'Site': True, \n                                  'LEA_Type': True, \n                                  'QA_Policy_Manual': True, \n                                  'Latitude':False,\n                                  'Longitude': False\n                              },\n                  color_continuous_scale=px.colors.cyclical.IceFire, \n                  size_max=15, \n                  zoom=10,\n                  mapbox_style=\"carto-positron\")\n\nfig = px.choropleth_mapbox(df, \n                           geojson=counties, \n                           locations='fips',\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(0, 12),\n                           mapbox_style=\"carto-positron\",\n                           zoom=4.7, \n                           center = {\"lat\": 37.0902, \"lon\": -120.7129},\n                           opacity=0.5,\n                          )\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.add_trace(\n    fig_scatter.data[0]\n)\n\n# customize hover label appearance\nfig.update_layout(\n    hoverlabel=dict(\n        bgcolor=\"white\",\n        font_size=12,\n        font_family=\"Rockwell\"\n    )\n)\n\nfig.show()\n\n\n\n                                                \n\n\nNothing here, yet! It’s coming. It’s here!"
  },
  {
    "objectID": "index.html#stanford-entities",
    "href": "index.html#stanford-entities",
    "title": "Know Systemic Racism Data Projects",
    "section": "Stanford Entities",
    "text": "Stanford Entities\n\ndata\nThis is the start of collecting graph data from Stanford-related library projects."
  },
  {
    "objectID": "index.html#blackstanford",
    "href": "index.html#blackstanford",
    "title": "Know Systemic Racism Data Projects",
    "section": "Black@Stanford",
    "text": "Black@Stanford\n\ndemo| code | deprecated code\nThis is a prototype Question/Answer app that uses as the source a set of oral history transcripts from Black Stanford students and faculty."
  },
  {
    "objectID": "index.html#digital-traces",
    "href": "index.html#digital-traces",
    "title": "Know Systemic Racism Data Projects",
    "section": "Digital Traces",
    "text": "Digital Traces\n\ndata | code\nThis is graph data and a conversational interface to a neo4j database to query the graph. It is based on work done during the winter 2023 course Digital Traces."
  },
  {
    "objectID": "index.html#simple-sabotage",
    "href": "index.html#simple-sabotage",
    "title": "Know Systemic Racism Data Projects",
    "section": "Simple Sabotage",
    "text": "Simple Sabotage\n\npaper\nNothing here, yet! For an article we will write during summer 2023."
  },
  {
    "objectID": "index.html#california-military-equipment-inventory",
    "href": "index.html#california-military-equipment-inventory",
    "title": "Know Systemic Racism Data Projects",
    "section": "California Military Equipment Inventory",
    "text": "California Military Equipment Inventory\n\ncode | urls-data | index-data\nThis is the code and data for an app in development that makes information about military equipment used by California law enforcement agencies discoverable."
  },
  {
    "objectID": "presentations/summer-2023-week3.html",
    "href": "presentations/summer-2023-week3.html",
    "title": "Summer 2023 Data Team",
    "section": "",
    "text": "preload-iframes: true format: revealjs"
  },
  {
    "objectID": "presentations/summer-2023-week3.html#anabelle-colmenares",
    "href": "presentations/summer-2023-week3.html#anabelle-colmenares",
    "title": "Summer 2023 Data Team",
    "section": "Anabelle Colmenares",
    "text": "Anabelle Colmenares\n\nData wrangling\nData analysis tools\nData visualization\nWeb development"
  },
  {
    "objectID": "search-bar.html",
    "href": "search-bar.html",
    "title": "Search for California Law Enforcement Agencies (LEA)",
    "section": "",
    "text": "This is a list of California law enforcement agencies that we have gathered and curated for the purpose of finding and tracking policy manuals and military equipment inventories. This list of LEAs was obtained from the California’s Commision on Police Officer Standards and Training"
  },
  {
    "objectID": "search-bar.html#search-by-keyword",
    "href": "search-bar.html#search-by-keyword",
    "title": "Search for California Law Enforcement Agencies (LEA)",
    "section": "Search By Keyword",
    "text": "Search By Keyword\n\nNotes\n\nMEP = Military Equipment Policy\nMEI = Military Equipment Inventory\n\n\n\nCode\ndata = FileAttachment(\"LEA-20230424.csv\").csv({ typed: true })\n\nviewof search = Inputs.search(data, \n{placeholder: \"Enter a zip code, county, city, or police department name\", \nwidth: 900,\nlabel: \"Search LEAs\"\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nviewof rows = Inputs.table(search, {\n  header: {\n    Ref: \"Reference Number\",\n    LEA_Name: \"LEA Name\",\n    Exact_Address: \"Exact Address\",\n    Zip_Code: \"Zip Code\",\n    LEA_Type: \"LEA Type\",\n    Site: \"LEA Website\",\n    Policy_Manual_Exists: \"Policy Manual Exists?\",\n    Mil_Equip_Policy_Exists: \"MEP Exists?\",\n    \"Military Equipment Inventory Exists\": \"MEI Exists?\",\n    QA_Policy_Manual: \"QA Policy Manual Link\",\n    QA_Mil_Equip_Policy: \"QA MEP Link\",\n    \"QA Mil_Equip_Inventory (if separate)\": \"QA MEI Link (if separate)\"\n  },\n  format: {\n    Zip_Code: x =&gt; x.toFixed(0),\n  },\n})"
  },
  {
    "objectID": "search-bar.html#search-by-map-under-construction",
    "href": "search-bar.html#search-by-map-under-construction",
    "title": "Search for California Law Enforcement Agencies (LEA)",
    "section": "Search By Map (under construction…)",
    "text": "Search By Map (under construction…)\n\n\nCode\ngeo = require(\"geoverview@1.2.1\")\ntopojson = require(\"topojson\")\nus = FileAttachment(\"ca_counties_geoverview.json\").json()\nairportsJson = FileAttachment(\"airports.geojson\").json()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ncounties = topojson.feature(us, us.objects.counties)\n\n\n\n\n\n\n\n\n\nCode\ngeo.view(counties, {width: 900})\n\n\n\n\n\n\n\n\n\nCode\ngeo.view(airportsJson)\n\n\n\n\n\n\n\n\n\n\n\nCode\nbertin = require(\"bertin@1.2.4\")\n\n\n\n\n\n\n\n\n\nCode\nbertin.quickdraw(counties)"
  }
]