[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This site records the work and work-in-progress of the data team supporting the Know Systemic Racism project."
  },
  {
    "objectID": "ca-map-cnty-bndry.html",
    "href": "ca-map-cnty-bndry.html",
    "title": "California Map With County Boundaries",
    "section": "",
    "text": "Code\nfrom urllib.request import urlopen\nimport json\nwith urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:\n    counties = json.load(response)\n\nimport pandas as pd\n# ** the file below is hosted locally but I could alternatively write code that removes all the non-CA fip codes from the DF \ndf = pd.read_csv(\"one_col_raw.githubusercontent.com_plotly_datasets_master_fips-unemp-16.csv\",  \n                   dtype={\"fips\": str})\ndf_scatter = pd.read_csv(\"LEA-20230424.csv\",  \n                   dtype={\"fips\": str})\n\nimport plotly.express as px\n\nfig_scatter = px.scatter_mapbox(df_scatter, lat='Latitude', lon='Longitude',\n                  # color=\"Policy_Manual_Exists\", \n                  # size=\"car_hours\",\n                  labels={'LEA_Type': 'LEA Type', 'Mil_Equip_Policy_Exists' : 'Military Equipment Policy Exists', 'Policy_Manual_Exists' : 'Policy Manual Exists','QA_Policy_Manual': 'Policy Manual Link'},  # replaces left hand name with right hand name in hover\n                  hover_name='LEA_Name',\n                  hover_data=['City', 'County', 'Site', 'LEA_Type', 'Mil_Equip_Policy_Exists', 'Military Equipment Inventory Exists', 'Policy_Manual_Exists', 'QA_Policy_Manual', ],\n                  color_continuous_scale=px.colors.cyclical.IceFire, size_max=15, zoom=10,\n                  mapbox_style=\"carto-positron\")\n\nfig = px.choropleth_mapbox(df, geojson=counties, locations='fips',\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(0, 12),\n                           mapbox_style=\"carto-positron\",\n                           zoom=4.7, center = {\"lat\": 37.0902, \"lon\": -120.7129},\n                           opacity=0.5,\n                          )\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.add_trace(\n    fig_scatter.data[0]\n)\nfig.show()"
  },
  {
    "objectID": "Workplan Summer 2023.html",
    "href": "Workplan Summer 2023.html",
    "title": "know-systemic-racism",
    "section": "",
    "text": "Code\nimport pandas as pd\n\ndef make_clickable(val):\n    # target _blank to open new window\n    return '&lt;a target=\"_blank\" href=\"{}\"&gt;{}&lt;/a&gt;'.format(val, val)\n\nsheet_url = 'https://docs.google.com/spreadsheets/d/1IfK0gInyBM9KOhrxglCBqPp13fyX6ZjXVCQJDj-WGck/edit#gid=0'\nurl_1 = sheet_url.replace('/edit#gid=', '/export?format=csv&gid=')\n\ndf = pd.read_csv(url_1)\ndf.loc[:, ~df.columns.isin(['Unnamed: 6', 'Unnamed: 7', 'Unnamed: 8'])]\n\n\n\n\n\n\n\n\n\nDataset\nVictims anonymized?\nDate range\nSize\nData type\nLocation of injury data?\nAccess Links\n\n\n\n\n0\nNOIHD\nTrue\n2000-2017\nHuge\nStata file\nTrue (but general location, probably at city-l...\nhttps://drive.google.com/drive/folders/1JeXad_...\n\n\n1\nFatal Encounters\nFalse\n2000-2021\nBig\nCSV\nTrue (as exact as possible)\nhttps://docs.google.com/spreadsheets/d/1dKmaV_...\n\n\n2\nWashington Post\nFalse\n2015-2023\nSmallest\nCSV or JSON\nNaN\nhttps://www.washingtonpost.com/graphics/invest..."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Know Systemic Racism Data Projects",
    "section": "",
    "text": "All of the projects below are in active development. If you are interested in learning more about Know Systemic Racism, see this post or contact Felicia Smith at felicias@stanford.edu"
  },
  {
    "objectID": "index.html#california-law-enforcement-agencies",
    "href": "index.html#california-law-enforcement-agencies",
    "title": "Know Systemic Racism Data Projects",
    "section": "California Law Enforcement Agencies",
    "text": "California Law Enforcement Agencies\n\ndata | search\nThis is a list of California law enforcement agencies with coordinate locations of headquarters and links to policy manuals and military equipment inventories."
  },
  {
    "objectID": "index.html#fatal-encounters",
    "href": "index.html#fatal-encounters",
    "title": "Know Systemic Racism Data Projects",
    "section": "Fatal Encounters",
    "text": "Fatal Encounters\n\nsearch + visualizations"
  },
  {
    "objectID": "index.html#knowledge-graph",
    "href": "index.html#knowledge-graph",
    "title": "Know Systemic Racism Data Projects",
    "section": "Knowledge Graph",
    "text": "Knowledge Graph\n\ndata | app\nThe Know Systemic Racism Knowledge Graph is a project to construct a richly connected graph of events, people, organizations, and people to reveal connections between discrete collections of data and the people behind the data."
  },
  {
    "objectID": "index.html#california-map",
    "href": "index.html#california-map",
    "title": "Know Systemic Racism Data Projects",
    "section": "California Map",
    "text": "California Map\n\nview map | code\n\n\nCode\nfrom urllib.request import urlopen\nimport json\nwith urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:\n    counties = json.load(response)\n\nimport pandas as pd\n# ** the file below is hosted locally but I could alternatively write code that removes all the non-CA fip codes from the DF \ndf = pd.read_csv(\"one_col_raw.githubusercontent.com_plotly_datasets_master_fips-unemp-16.csv\",  \n                   dtype={\"fips\": str})\ndf_scatter = pd.read_csv(\"LEA-20230424.csv\")\n\nimport plotly.express as px\n\nfig_scatter = px.scatter_mapbox(df_scatter, \n                  lat='Latitude',\n                  lon='Longitude',\n                  # color=\"Policy_Manual_Exists\", \n                  # size=\"car_hours\",\n                  labels={'LEA_Type': 'LEA Type', 'QA_Policy_Manual': 'Policy Manual Link'},  # replaces left hand name with right hand name in hover\n                  hover_name='LEA_Name',\n                  hover_data={\n                                  'City': True, \n                                  'County': True, \n                                  'Site': True, \n                                  'LEA_Type': True, \n                                  'QA_Policy_Manual': True, \n                                  'Latitude':False,\n                                  'Longitude': False\n                              },\n                  color_continuous_scale=px.colors.cyclical.IceFire, \n                  size_max=15, \n                  zoom=10,\n                  mapbox_style=\"carto-positron\")\n\nfig = px.choropleth_mapbox(df, \n                           geojson=counties, \n                           locations='fips',\n                           color_continuous_scale=\"Viridis\",\n                           range_color=(0, 12),\n                           mapbox_style=\"carto-positron\",\n                           zoom=4.7, \n                           center = {\"lat\": 37.0902, \"lon\": -120.7129},\n                           opacity=0.5,\n                          )\nfig.update_geos(fitbounds=\"locations\", visible=False)\nfig.update_layout(margin={\"r\":0,\"t\":0,\"l\":0,\"b\":0})\nfig.add_trace(\n    fig_scatter.data[0]\n)\n\n# customize hover label appearance\nfig.update_layout(\n    hoverlabel=dict(\n        bgcolor=\"white\",\n        font_size=12,\n        font_family=\"Rockwell\"\n    )\n)\n\nfig.show()\n\n\n\n                                                \n\n\nNothing here, yet! It’s coming. It’s here!"
  },
  {
    "objectID": "index.html#stanford-entities",
    "href": "index.html#stanford-entities",
    "title": "Know Systemic Racism Data Projects",
    "section": "Stanford Entities",
    "text": "Stanford Entities\n\ndata\nThis is the start of collecting graph data from Stanford-related library projects."
  },
  {
    "objectID": "index.html#blackstanford",
    "href": "index.html#blackstanford",
    "title": "Know Systemic Racism Data Projects",
    "section": "Black@Stanford",
    "text": "Black@Stanford\n\ndemo| code | deprecated code\nThis is a prototype Question/Answer app that uses as the source a set of oral history transcripts from Black Stanford students and faculty."
  },
  {
    "objectID": "index.html#digital-traces",
    "href": "index.html#digital-traces",
    "title": "Know Systemic Racism Data Projects",
    "section": "Digital Traces",
    "text": "Digital Traces\n\ndata | code\nThis is graph data and a conversational interface to a neo4j database to query the graph. It is based on work done during the winter 2023 course Digital Traces."
  },
  {
    "objectID": "index.html#simple-sabotage",
    "href": "index.html#simple-sabotage",
    "title": "Know Systemic Racism Data Projects",
    "section": "Simple Sabotage",
    "text": "Simple Sabotage\n\npaper\nNothing here, yet! For an article we will write during summer 2023."
  },
  {
    "objectID": "index.html#california-military-equipment-inventory",
    "href": "index.html#california-military-equipment-inventory",
    "title": "Know Systemic Racism Data Projects",
    "section": "California Military Equipment Inventory",
    "text": "California Military Equipment Inventory\n\ncode | urls-data | index-data\nThis is the code and data for an app in development that makes information about military equipment used by California law enforcement agencies discoverable."
  },
  {
    "objectID": "lea-search-bar.html",
    "href": "lea-search-bar.html",
    "title": "Search for California Law Enforcement Agencies (LEA)",
    "section": "",
    "text": "This is a list of California law enforcement agencies that we have gathered and curated for the purpose of finding and tracking policy manuals and military equipment inventories. This list of LEAs was obtained from the California’s Commision on Police Officer Standards and Training"
  },
  {
    "objectID": "lea-search-bar.html#search-leas-by-keyword",
    "href": "lea-search-bar.html#search-leas-by-keyword",
    "title": "Search for California Law Enforcement Agencies (LEA)",
    "section": "Search LEAs By Keyword",
    "text": "Search LEAs By Keyword\n\nNotes\n\nMEP = Military Equipment Policy\nMEI = Military Equipment Inventory\n\n\n\nCode\ndata = FileAttachment(\"LEA-20230424.csv\").csv({ typed: true })\n\nviewof search = Inputs.search(data, \n{placeholder: \"Enter a zip code, county, city, or police department name\", \nwidth: 900,\nlabel: \"Search LEAs\"\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nviewof rows = Inputs.table(search, {\n  header: {\n    Ref: \"Reference Number\",\n    LEA_Name: \"LEA Name\",\n    Exact_Address: \"Exact Address\",\n    Zip_Code: \"Zip Code\",\n    LEA_Type: \"LEA Type\",\n    Site: \"LEA Website\",\n    Policy_Manual_Exists: \"Policy Manual Exists?\",\n    Mil_Equip_Policy_Exists: \"MEP Exists?\",\n    \"Military Equipment Inventory Exists\": \"MEI Exists?\",\n    QA_Policy_Manual: \"QA Policy Manual Link\",\n    QA_Mil_Equip_Policy: \"QA MEP Link\",\n    \"QA Mil_Equip_Inventory (if separate)\": \"QA MEI Link (if separate)\"\n  },\n  format: {\n    Zip_Code: x =&gt; x.toFixed(0),\n    Site: x =&gt; htl.html`&lt;a href=${x} target=_blank&gt;${x}&lt;/a&gt;`,\n    QA_Policy_Manual: x =&gt; htl.html`&lt;a href=${x} target=_blank&gt;${x}&lt;/a&gt;`,\n    QA_Mil_Equip_Policy: x =&gt; htl.html`&lt;a href=${x} target=_blank&gt;${x}&lt;/a&gt;`, \n    \"QA Mil_Equip_Inventory (if separate)\": x =&gt; htl.html`&lt;a href=${x} target=_blank&gt;${x}&lt;/a&gt;`,\n  },\n})"
  },
  {
    "objectID": "lea-search-bar.html#search-by-map-under-construction",
    "href": "lea-search-bar.html#search-by-map-under-construction",
    "title": "Search for California Law Enforcement Agencies (LEA)",
    "section": "Search By Map (under construction…)",
    "text": "Search By Map (under construction…)\n\n\nCode\ngeo = require(\"geoverview@1.2.1\")\ntopojson = require(\"topojson\")\nus = FileAttachment(\"ca_counties_geoverview.json\").json()\nairportsJson = FileAttachment(\"airports.geojson\").json()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ncounties = topojson.feature(us, us.objects.counties)\n\n\n\n\n\n\n\n\n\nCode\ngeo.view(counties, {width: 900})\n\n\n\n\n\n\n\n\n\nCode\ngeo.view(airportsJson)\n\n\n\n\n\n\n\n\n\n\n\nCode\nbertin = require(\"bertin@1.2.4\")\n\n\n\n\n\n\n\n\n\nCode\nbertin.quickdraw(counties)"
  },
  {
    "objectID": "presentations/summer-2023-week3.html",
    "href": "presentations/summer-2023-week3.html",
    "title": "The Team",
    "section": "",
    "text": "title: Summer 2023 Data Team {background-iframe=“networkiframe/index.html”} preload-iframes: true format: revealjs"
  },
  {
    "objectID": "presentations/summer-2023-week3.html#anabelle-colmenares",
    "href": "presentations/summer-2023-week3.html#anabelle-colmenares",
    "title": "The Team",
    "section": "Anabelle Colmenares",
    "text": "Anabelle Colmenares\n\nData wrangling\nData analysis tools\nData visualization\nWeb development"
  },
  {
    "objectID": "presentations/summer-2023-week3.html#chloe-williams",
    "href": "presentations/summer-2023-week3.html#chloe-williams",
    "title": "The Team",
    "section": "Chloe Williams",
    "text": "Chloe Williams\n\nData collection\nData analysis\nData schema design\nData archive"
  },
  {
    "objectID": "fe-search-viz.html",
    "href": "fe-search-viz.html",
    "title": "Searching and Visualizing Fatal Encounters Dataset",
    "section": "",
    "text": "These tables and visualizations are generated using the Fatal Encounters Dataset from fatalencounters.org. As seen in the bar charts, this dataset ranges from 2000-2021."
  },
  {
    "objectID": "fe-search-viz.html#search-fatal-encounters-dataset",
    "href": "fe-search-viz.html#search-fatal-encounters-dataset",
    "title": "Searching and Visualizing Fatal Encounters Dataset",
    "section": "Search Fatal Encounters Dataset",
    "text": "Search Fatal Encounters Dataset\n\nEntire U.S.\n\n\n\n\n\n\n\n\nCode\nviewof fe_search = Inputs.search(transpose(fe_data), \n{placeholder: \"Enter a name, zip code, county, city, or police department name\", \nwidth: 900,\nlabel: \"Search FE Data\"\n})\n\n\n\n\n\n\n\n\n\nCode\nviewof fe_rows = Inputs.table(fe_search, {\n  columns: [\n    'Unique ID',\n    'Name',\n    'Age',\n    'Gender',\n    'Race',\n    'Race with imputations',\n    'Imputation probability',\n    'URL of image (PLS NO HOTLINKS)',\n    ' Date of injury resulting in death (month/day/year)',\n    'Location of injury (address)',\n    'Location of death (city)',\n    'State',\n    'Location of death (zip code)',\n    'Location of death (county)',\n    'Full Address',\n    'Latitude',\n    'Longitude',\n    'Agency or agencies involved',\n    'Highest level of force',\n    'UID Temporary',\n    'Name Temporary',\n    'Armed/Unarmed',\n    'Alleged weapon',\n    'Aggressive physical movement',\n    'Fleeing/Not fleeing',\n    'Description Temp',\n    'URL Temp',\n    'Brief description',\n    'Intended use of force (Developing)',\n    'Supporting document link',\n  ],\n  format: {\n    'Unique ID': x =&gt; x.toFixed(0),\n    'Location of death (zip code)': x =&gt; x.toFixed(0),\n    'Supporting document link': x =&gt; htl.html`&lt;a href=${x} target=_blank&gt;${x}&lt;/a&gt;`,\n    'URL of image (PLS NO HOTLINKS)': x =&gt; htl.html`&lt;a href=${x} target=_blank&gt;${x}&lt;/a&gt;`\n  },\n})\n\n\n\n\n\n\n\n\n\nCalifornia Only\n\n\nCode\nca_only = transpose(fe_data).filter(function(p) {\n  return p.State === 'CA';\n})\n\n\n\n\n\n\n\n\n\nCode\nviewof fe_ca_search_all_cols = Inputs.search(ca_only, \n{placeholder: \"Enter a name, zip code, county, city, or police department name\", \nwidth: 900,\nlabel: \"Search FE Data (CA only)\"\n})\n\n\n\n\n\n\n\n\n\nCode\nviewof fe_rows_ca_all_cols = Inputs.table(fe_ca_search_all_cols, \n{\n  columns: [\n    'Unique ID',\n    'Name',\n    'Age',\n    'Gender',\n    'Race',\n    'Race with imputations',\n    'Imputation probability',\n    'URL of image (PLS NO HOTLINKS)',\n    ' Date of injury resulting in death (month/day/year)',\n    'Location of injury (address)',\n    'Location of death (city)',\n    'State',\n    'Location of death (zip code)',\n    'Location of death (county)',\n    'Full Address',\n    'Latitude',\n    'Longitude',\n    'Agency or agencies involved',\n    'Highest level of force',\n    'UID Temporary',\n    'Name Temporary',\n    'Armed/Unarmed',\n    'Alleged weapon',\n    'Aggressive physical movement',\n    'Fleeing/Not fleeing',\n    'Description Temp',\n    'URL Temp',\n    'Brief description',\n    'Intended use of force (Developing)',\n    'Supporting document link',\n  ],\n  format: {\n    'Unique ID': x =&gt; x.toFixed(0),\n    'Location of death (zip code)': x =&gt; x.toFixed(0),\n    'Supporting document link': x =&gt; htl.html`&lt;a href=${x} target=_blank&gt;${x}&lt;/a&gt;`,\n    'URL of image (PLS NO HOTLINKS)': x =&gt; htl.html`&lt;a href=${x} target=_blank&gt;${x}&lt;/a&gt;`\n  },\n} \n)\n\n\n\n\n\n\n\n\n\nCode\ntidy_w_race = transpose(fe_data).map(d =&gt; ({date: new Date(d[' Date of injury resulting in death (month/day/year)']).getFullYear(), count: 1, race: d.Race, state: d.State}))"
  },
  {
    "objectID": "fe-search-viz.html#preliminary-fe-data-visualizations",
    "href": "fe-search-viz.html#preliminary-fe-data-visualizations",
    "title": "Searching and Visualizing Fatal Encounters Dataset",
    "section": "Preliminary FE Data Visualizations",
    "text": "Preliminary FE Data Visualizations\n\nEntire U.S.\nThe plot below visualizes the number of fatal encounters per year for all of the United States.\n\n\nCode\nPlot.plot({\n  width: 928,\n  height: 500,\n  x: {tickFormat: \"\"},\n  y: {tickSpacing: 50},\n  color: {legend: true},\n  marks: [\n  Plot.barY(tidy_w_race, {x: 'date', y: 'count', fill: 'race', sort: 'race'}),\n  ]\n})\n\n\n\n\n\n\n\nThe plot below visualizes the number of fatal encounters per year for all of the United States separated by state.\n\n\nCode\ntidy_no_race = tidy_w_race.map(d =&gt; ({date: d.date, count: d.count, state: d.state}))\n\n\n\n\n\n\n\n\n\nCode\nviewof fe_search_by_state = Inputs.search(tidy_no_race, \n{placeholder: `Enter an abbreviated state name (i.e. for California, type \"CA\")`, \nwidth: 900,\nlabel: \"Search by state\"\n})\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n  width: 928,\n  height: 500,\n  x: {tickFormat: \"\"},\n  y: {tickSpacing: 50},\n  color: {legend: true},\n  marks: [\n  Plot.barY(fe_search_by_state, {x: 'date', y: 'count', fill: 'state', sort: 'state'}),\n  ]\n})\n\n\n\n\n\n\n\n\n\nCalifornia Only\nThe plot below visualizes the number of fatal encounters per year for California only.\n\n\nCode\nca_only_tidy = ca_only.map(p =&gt; ({name: p.Name, date: new Date(p[' Date of injury resulting in death (month/day/year)']).getFullYear(), count: 1, race: p.Race, lea: p['Agency or agencies involved']}))\n\n\n\n\n\n\n\n\n\nCode\nviewof fe_ca_search = Inputs.search(ca_only_tidy, \n{placeholder: \"Enter a name, year, race, or police department name\", \nwidth: 900,\nlabel: \"Search Fatal Encounter Dataset (CA only)\"\n})\n\n\n\n\n\n\n\n\n\nCode\nviewof fe_rows_ca = Inputs.table(fe_ca_search, \n{\n  columns: [\n    'name',\n    'date',\n    'race',\n    'lea',\n  ],\n  format: {\n    date : x =&gt; x.toFixed(0),\n    // 'Location of death (zip code)': x =&gt; x.toFixed(0),\n    // 'Supporting document link': x =&gt; htl.html`&lt;a href=${x} target=_blank&gt;${x}&lt;/a&gt;`,\n    // 'URL of image (PLS NO HOTLINKS)': x =&gt; htl.html`&lt;a href=${x} target=_blank&gt;${x}&lt;/a&gt;`\n  },\n} \n)\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n  width: 1000,\n  height: 600,\n  x: {tickFormat: \"\"},\n  y: {tickSpacing: 50},\n  color: {legend: true},\n  marks: [\n  Plot.barY(fe_ca_search, {x: 'date', y: 'count', fill: 'race', sort: 'race'}),\n  ]\n})"
  }
]